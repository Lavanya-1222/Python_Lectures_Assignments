{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "96d8f5a5-9767-4d11-a402-439ab3a7980f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy import random as rd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f1be0d88-265e-4663-974a-f45f5b3bf312",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[48, 11, 83, 18, 58],\n",
       "       [36, 54, 92, 71, 16],\n",
       "       [94, 20, 58, 19, 20],\n",
       "       [75, 29, 31, 64, 74]], dtype=int32)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " # Write a Python program to create a 2D NumPy array with random integers ranging from 10 to 100 of size (4, 5)\n",
    "rd.randint(10,100,(4,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a4cc57b2-c453-4804-9538-73c005aa4f46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, 0, 0],\n",
       "       [1, 1, 1, 1, 1],\n",
       "       [0, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 0, 0],\n",
       "       [0, 0, 0, 0, 0]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2. Create a 5x5 2D array of zeros using NumPy and replace the elements in the second row with ones.\n",
    "arr=np.zeros((5,5),dtype=int)\n",
    "arr[1]=1\n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "59ec16e8-c620-46b2-ae53-7bec01fab287",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2,  4],\n",
       "       [ 6,  8],\n",
       "       [10, 12]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3. Given a 3x4 NumPy array, extract the second and third columns from the array.\n",
    "arr=np.arange(1,13).reshape(3,4)\n",
    "arr\n",
    "arr[:,1::2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "37c8d3c8-9ecc-40c6-b542-8a0710dd90fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 0, 0, 0, 0, 0],\n",
       "       [0, 1, 0, 0, 0, 0],\n",
       "       [0, 0, 1, 0, 0, 0],\n",
       "       [0, 0, 0, 1, 0, 0],\n",
       "       [0, 0, 0, 0, 1, 0],\n",
       "       [0, 0, 0, 0, 0, 1]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4. Create a 6x6 NumPy array where the diagonal elements are 5, and the rest are zeros.\n",
    "arr=np.zeros((6,6),dtype=int)\n",
    "for i in range(len(arr)):\n",
    "    for j in range(len(arr[i])):\n",
    "        if i==j:\n",
    "            arr[i][j]=1\n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7ba79cdd-3255-4bfc-925e-4fad1c56bc91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2],\n",
       "       [5, 6]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 5. Write a Python program to generate a 4x4 array filled with numbers from 1 to 16 and slice the top-left 2x2 sub-array.\n",
    "arr=np.arange(1,17).reshape(4,4)\n",
    "arr[0:2,0:2]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "610dcc30-6f01-4788-a926-dc0f6d4f32c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2, 3],\n",
       "       [5, 6]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 6. Given a 4x3 NumPy array, slice and extract the first two rows and the last two columns.\n",
    "arr=np.arange(1,13).reshape(4,3)\n",
    "arr[0:2,1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "76f69ca3-6f30-4a26-b40d-57fe4fdbfe2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2]\n",
      " [3 4]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[3, 4],\n",
       "       [1, 2]])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 7. Write a Python program to create a 2D NumPy array and swap the first and last rows.\n",
    "import copy\n",
    "arr=np.arange(1,5).reshape(2,2)\n",
    "print(arr)\n",
    "t=copy.copy(arr[0])\n",
    "\n",
    "arr[0]=arr[1]\n",
    "arr[1]=t\n",
    "arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "42b3b8ef-ed52-4e24-8bf6-d82e7b232a85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[22 84 51 21]\n",
      " [76 75 31 76]\n",
      " [84 31 67 27]\n",
      " [76 62 99 27]\n",
      " [83 99 22 78]]\n",
      "[[76 75 31 76]\n",
      " [76 62 99 27]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([76, 75, 76, 76, 62, 99], dtype=int32)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 8. Create a 5x4 2D NumPy array of random numbers. Extract all elements greater than 50 from the second and fourth rows.\n",
    "x=rd.randint(20,100,(5,4))\n",
    "print(x)\n",
    "x2=x[1::2,:]\n",
    "print(x2)\n",
    "x2[x2>50]\n",
    "# for i in range(1,len(x),2):\n",
    "#     for j in i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "73299bda-7770-462f-9f04-0f784842d42d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.37524427 0.7481121  0.43514123 0.18360023 0.76661496]\n",
      " [0.35540864 0.26388568 0.06445878 0.09325589 0.01236739]\n",
      " [0.17912817 0.44399029 0.16446718 0.44651414 0.10725784]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.7481121 , 0.76661496],\n",
       "       [0.26388568, 0.01236739],\n",
       "       [0.44399029, 0.10725784]])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 9. Generate a 3x5 array filled with random numbers between 0 and 1. Slice and extract all rows with columns 1 and 4.\n",
    "x=rd.rand(3,5)\n",
    "print(x)\n",
    "x[:,1::3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "e943522b-b76e-402c-a03c-294786d2e6c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 8, 21, 19, 15, 10],\n",
       "       [ 6,  5, 15, 13,  1],\n",
       "       [ 7,  7,  7,  7,  7],\n",
       "       [ 3,  3,  3,  3,  3],\n",
       "       [29,  6, 20, 18, 26],\n",
       "       [ 4, 15,  8, 25, 21]], dtype=int32)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 10. Create a 2D array with 6 rows and 5 columns. Replace all elements in the third row with 7 and all elements in the fourth column with 3.\n",
    "x=rd.randint(1,31,(6,5))\n",
    "x[2]=7\n",
    "x[3]=3\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "4367826d-8830-463b-8aea-811ae123fb1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 0],\n",
       "       [0, 1]])"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 11. Write a Python program to create a 4x4 identity matrix and slice the last two rows and last two columns.\n",
    "d=np.identity(4,dtype=int)\n",
    "d\n",
    "d[2:,2:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "0d312fca-db9a-4348-8f2c-3407463c095e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 6  5  6  7  4  7]\n",
      " [ 6  6 10  2  7 17]\n",
      " [ 9  5  3  1  7  6]\n",
      " [19  5  3 12 12  5]\n",
      " [ 9  1 12  1 15 15]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[10,  2],\n",
       "       [ 3,  1]], dtype=int32)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 12. Create a NumPy array of shape (5, 6) with random integers from 1 to 20. Extract a 2x3 sub-array from the middle of the array.\n",
    "x=rd.randint(1,20,(5,6))\n",
    "print(x)\n",
    "x[1:3,2:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "ef1b188e-8d6c-4167-b911-424b848d5be5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10 11 12 13 14]\n",
      " [15 16 17 18 19]\n",
      " [20 21 22 23 24]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[10, 11, 12, 13, 14],\n",
       "       [20, 21, 22, 23, 24]])"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 13. Write a Python program to create a 3x5 2D array of integers from 10 to 24 and extract every alternate row.\n",
    "x=np.arange(10,25).reshape(3,5)\n",
    "print(x)\n",
    "x[::2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "d22cd8eb-1015-476a-ae78-537cff157b15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[18 24 48 36 30]\n",
      " [19 20 28 42  1]\n",
      " [ 4 21  7 14 18]\n",
      " [12 30 18 30 21]\n",
      " [ 8 15  5 13 21]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[18, 30],\n",
       "       [19,  1],\n",
       "       [ 4, 18],\n",
       "       [12, 21],\n",
       "       [ 8, 21]], dtype=int32)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 14. Generate a 5x5 2D NumPy array of random integers from 0 to 50. Slice all rows but only the first and last two columns.\n",
    "x=rd.randint(0,50,(5,5))\n",
    "print(x)\n",
    "x[:,0::4]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "145f53e2-2a06-4144-9cfe-e25798679404",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 0 0 0]\n",
      " [0 0 0 0]\n",
      " [0 0 0 0]\n",
      " [0 0 0 0]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, 3],\n",
       "       [0, 0, 0, 3],\n",
       "       [0, 0, 0, 3],\n",
       "       [3, 3, 3, 3]])"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 15. Create a 4x4 NumPy array where all elements are initially zero. \n",
    "# Replace the elements in the last row and last column with the index of the row or column.\n",
    "x=np.zeros((4,4),dtype=int)\n",
    "print(x)\n",
    "x[-1]=3\n",
    "x[:,-1]=3\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "343405ce-358d-4d23-bec0-45a0b7bbf340",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
